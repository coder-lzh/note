import{_ as i,c as s,o as a,aS as t}from"./chunks/framework.DdXuCH6B.js";const e="/assets/git-brance-01.DJPWx8pV.png",n="/assets/idea-git3.CcMulcb-.png",l="/assets/idea-git4.Z0OWnVrv.png",p="/assets/idea-git5.CxzJnIfG.png",h="/assets/idea-git7.kDwNzAEd.png",r="/assets/idea-git8.C6k4VUDg.png",o="/assets/idea-git9.Dlj34m5z.png",c="/assets/idea-git10.CIhqnPmG.png",d="/assets/idea-git11.vxg1L9hb.png",m="/assets/idea-git12.BfJqh3YE.png",g="/assets/idea-git13.CaRfap3w.png",D=JSON.parse('{"title":"IDEA操作Git","description":"","frontmatter":{},"headers":[],"relativePath":"note/efficiency/gitHub/04-IDEA操作Git.md","filePath":"note/efficiency/gitHub/04-IDEA操作Git.md","lastUpdated":1722265153000}'),k={name:"note/efficiency/gitHub/04-IDEA操作Git.md"},_=t('<h1 id="idea操作git" tabindex="-1">IDEA操作Git <a class="header-anchor" href="#idea操作git" aria-label="Permalink to &quot;IDEA操作Git&quot;">​</a></h1><h2 id="git分支误删找回" tabindex="-1">Git分支误删找回 <a class="header-anchor" href="#git分支误删找回" aria-label="Permalink to &quot;Git分支误删找回&quot;">​</a></h2><p>假如本地和远程的分支都被删除了，如何找回分支呢？</p><p>第一步，找到分支dev3的最后一个commitId</p><div class="language-shell vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> reflog</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>这个命令就可以看到分支的提交变化，找到删除分支的最后一个提交记录 <img src="'+e+'" alt="githubPage"></p><p>第二步，恢复分支</p><p>如果你找到的是分支的最后一次提交，可以通过以下命令来创建一个新分支：</p><div class="language-shell vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> checkout</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -b</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">new_branch_nam</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">e</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">commit_has</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">h</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>替换 &lt;new_branch_name&gt; 为你想要恢复的分支名称，&lt;commit_hash&gt; 替换为步骤2中找到的哈希值。</p><div class="language-shell vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> checkout</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -b</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> dev3_1</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> eef5a16</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>这个时候本地已经有了一个dev3_1的新分支了，将它推送到远程即可</p><h2 id="如何将多次commit合成一个" tabindex="-1">如何将多次commit合成一个 <a class="header-anchor" href="#如何将多次commit合成一个" aria-label="Permalink to &quot;如何将多次commit合成一个&quot;">​</a></h2><p>这个功能非常的实用，下面来看一下如何实现。需求：将第一次，第二次，第三次合并为一次提交。</p><p><img src="'+n+'" alt=""></p><p>鼠标放在自己的第一次提交上右键点击：Interactively Rebase from Here(从这里进行交互式衍合) <img src="'+l+'" alt=""> 点击之后出现如下页面(Rebasing Commits)： <img src="'+p+'" alt=""> 第二步：选中其中一次提交记录Ctrl+A进行全部选中 <img src="'+h+'" alt=""> 第三步：点击Squash(如上图箭头所示) <img src="'+r+'" alt=""> 在这里可以对我们的提交信息进行修改，这里建议自己新填写提交信息并且将之前的提交信息删除一些，言简意赅（我这里是将之前的提交信息全部删除，自己新填写的提交信息） <img src="'+o+'" alt=""> 最后结果 <img src="'+c+'" alt=""></p><h2 id="取消add的文件" tabindex="-1">取消Add的文件 <a class="header-anchor" href="#取消add的文件" aria-label="Permalink to &quot;取消Add的文件&quot;">​</a></h2><p>新增的文件，也就是未被git管理的文件是红色的。add之后的颜色是绿色的。取消的话，直接右键回滚就可以了 <img src="'+d+'" alt=""></p><h2 id="取消commit的文件" tabindex="-1">取消commit的文件 <a class="header-anchor" href="#取消commit的文件" aria-label="Permalink to &quot;取消commit的文件&quot;">​</a></h2><p>比如，我们想将最新的的commit也就是【文件3和4提交】这个给取消掉。那么就需要选中它的上一个commit回滚。模式可以选择第二个混合模式。 别忘了强制push <img src="'+m+'" alt=""></p><h2 id="将其他分支的commit合并到目标分支" tabindex="-1">将其他分支的commit合并到目标分支 <a class="header-anchor" href="#将其他分支的commit合并到目标分支" aria-label="Permalink to &quot;将其他分支的commit合并到目标分支&quot;">​</a></h2><p>有时候我们想将其他分支的个别的commit合并到指定的分支。idea非常的简单。仅仅需要点击一下，这个commit就跑到了指定的分支。 <img src="'+g+'" alt=""></p>',22),u=[_];function b(F,v,C,y,f,E){return a(),s("div",null,u)}const q=i(k,[["render",b]]);export{D as __pageData,q as default};
